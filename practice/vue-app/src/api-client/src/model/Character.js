/**
 * Rick and Morty API
 * Access information about characters from Rick and Morty.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CharacterLocation from './CharacterLocation';
import CharacterOrigin from './CharacterOrigin';

/**
 * The Character model module.
 * @module model/Character
 * @version 1.0.0
 */
class Character {
    /**
     * Constructs a new <code>Character</code>.
     * @alias module:model/Character
     */
    constructor() { 
        
        Character.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Character</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Character} obj Optional instance to populate.
     * @return {module:model/Character} The populated <code>Character</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Character();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('species')) {
                obj['species'] = ApiClient.convertToType(data['species'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = CharacterOrigin.constructFromObject(data['origin']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = CharacterLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('episode')) {
                obj['episode'] = ApiClient.convertToType(data['episode'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Character</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Character</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['species'] && !(typeof data['species'] === 'string' || data['species'] instanceof String)) {
            throw new Error("Expected the field `species` to be a primitive type in the JSON string but got " + data['species']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // validate the optional field `origin`
        if (data['origin']) { // data not null
          CharacterOrigin.validateJSON(data['origin']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          CharacterLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['episode'])) {
            throw new Error("Expected the field `episode` to be an array in the JSON data but got " + data['episode']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The id of the character.
 * @member {Number} id
 */
Character.prototype['id'] = undefined;

/**
 * The name of the character.
 * @member {String} name
 */
Character.prototype['name'] = undefined;

/**
 * The status of the character (Alive, Dead or unknown).
 * @member {String} status
 */
Character.prototype['status'] = undefined;

/**
 * The species of the character.
 * @member {String} species
 */
Character.prototype['species'] = undefined;

/**
 * The type or subspecies of the character.
 * @member {String} type
 */
Character.prototype['type'] = undefined;

/**
 * The gender of the character.
 * @member {String} gender
 */
Character.prototype['gender'] = undefined;

/**
 * @member {module:model/CharacterOrigin} origin
 */
Character.prototype['origin'] = undefined;

/**
 * @member {module:model/CharacterLocation} location
 */
Character.prototype['location'] = undefined;

/**
 * Link to the character's image.
 * @member {String} image
 */
Character.prototype['image'] = undefined;

/**
 * @member {Array.<String>} episode
 */
Character.prototype['episode'] = undefined;

/**
 * Link to the character's own URL endpoint.
 * @member {String} url
 */
Character.prototype['url'] = undefined;

/**
 * Time at which the character was created in the database.
 * @member {Date} created
 */
Character.prototype['created'] = undefined;






export default Character;

